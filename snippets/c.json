{
	// Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	/*
	Template:

	"Snippet Name":
	{
		"prefix": "",
		"body": 
		[
			
		],
		"description": ""
	},

	*/
//////////////////////////////////////////////////////////////////////////
	"Print Separate Line":
	{
		"prefix": "///",
		"body": 
		[
			"//////////////////////////////////////////////////////////////////////////"
		],
		"description": "Separate Line"
	},
//////////////////////////////////////////////////////////////////////////
	"printf()":
	{
		"prefix": "pr",
		"body": 
		[
			"printf(\"$1\",$2);"
		],
		"description": "printf"
	},
//////////////////////////////////////////////////////////////////////////
	"scanf()":
	{
		"prefix": "sc",
		"body": 
		[
			"scanf(\"$1\",$2)"
		],
		"description": "scanf"
	},
//////////////////////////////////////////////////////////////////////////
	"struct{}":
	{
		"prefix": "stru",
		"body": 
		[
			"struct ${1:MyStruct}\n{\n\t$2\n} $3;"
		],
		"description": "struct"
	},
//////////////////////////////////////////////////////////////////////////
	"return":
	{
		"prefix": "re",
		"body":
		[
		"return $1;"
		],
		"description": "return"
	},
//////////////////////////////////////////////////////////////////////////
	"A_Complex_C_Template":
	{
		"prefix": "#cs",
		"body":
		[
			"#include <stdio.h>\n",
			"#define NOTEST",
			"//////////////////////////////////////////////////////////////////////////\n",
			"//////////////////////////////////////////////////////////////////////////",
			"#ifdef NOTEST",
			"int main(int argc, char * argv[])",
			"{",
			"\t$0",
			"\treturn 0;",
			"}",
			"#endif",
			"//////////////////////////////////////////////////////////////////////////",
			"#ifdef TEST",
			"int main(int argc, char * argv[])",
			"{",
			"\t",
			"\treturn 0;",
			"}",
			"#endif",
			"//////////////////////////////////////////////////////////////////////////"
		],
		"description": "A complex c template"
	},
//////////////////////////////////////////////////////////////////////////
	"stdio.h":
	{
		"prefix": "stdio",
		"body":
		[
			"#include <stdio.h>"
		],
		"description": "stdio.h"
	},
	//////////////////////////////////////////////////////////////////////////
	
	"stdlib.h":
	{
		"prefix": "stdlib",
		"body":
		[
			"#include <stdlib.h>"
		],
		"description": "stdlib.h"
	},
//////////////////////////////////////////////////////////////////////////
	"stdbool.h":
	{
		"prefix": "stdbool",
		"body":
		[
			"#include <stdbool.h>"
		],
		"description": "stdbool.h"
	},
//////////////////////////////////////////////////////////////////////////
	"math.h":
	{
		"prefix": "math",
		"body":
		[
			"#include <math.h>"
		],
		"description": "math.h"
	},
	"if":
	{
		"prefix": "if",
		"body":
		[
			"if($1)",
			"{",
			"\t$2",
			"}"
		],
		"description": "if"
	},
	//////////////////////////////////////////////////////////////////////////
	"else":
	{
		"prefix": "el",
		"body":
		[
			"else",
			"{",
			"\t$1",
			"}"
		],
		"description": "else"
	},
	//////////////////////////////////////////////////////////////////////////
	"if-else":
	{
		"prefix": "ie",
		"body":
		[
			"if($1)",
			"{",
			"\t$2",
			"}",
			"else",
			"{",
			"\t$3",
			"}"
		],
		"description": "if-else"
	},
	//////////////////////////////////////////////////////////////////////////
	"else if":
	{
		"prefix": "ei",
		"body":
		[
			"else if($1)",
			"{",
			"\t$0",
			"}"
		],
		"description": "else if"
	},
	//////////////////////////////////////////////////////////////////////////
	"for":
	{
		"prefix": "f",
		"body":
		[
			"for(${1:size_t} i = 0; i < ${2:length}; i++)",
			"{",
			"\t$3",
			"}"
		],
		"description": "for"
	},
	//////////////////////////////////////////////////////////////////////////
	"while":
	{
		"prefix": "wh",
		"body":
		[
			"while($1)",
			"{",
			"\t$2",
			"}"
		],
		"description": "while"
	},
	//////////////////////////////////////////////////////////////////////////
	"do-while":
	{
		"prefix": "dw",
		"body":
		[
			"do",
			"{",
			"\t$2",
			"}",
			"while($1);"
		],
		"description": "do while"
	},
	//////////////////////////////////////////////////////////////////////////
	"malloc":
	{
		"prefix": "malloc",
		"body":
		[
			"(${1:type})malloc($2);"
		],
		"description": "malloc"
	},
	//////////////////////////////////////////////////////////////////////////
	"calloc":
	{
		"prefix": "calloc",
		"body":
		[
			"(${1:type})calloc($2,$3);"
		],
		"description": "calloc"
	},
	//////////////////////////////////////////////////////////////////////////
	"sizeof":
	{
		"prefix": "size",
		"body":
		[
			"sizeof(${1:type})"
		],
		"description": "sizeof"
	},
	//////////////////////////////////////////////////////////////////////////
	"/**/":
	{
		"prefix": "/*",
		"body":
		[
			"/*$0*/"
		],
		"description": "/**/"
	},
	//////////////////////////////////////////////////////////////////////////
	"getchar()":
	{
		"prefix": "getch",
		"body":
		[
			"getchar()$0"
		],
		"description": "getchar"
	},
	//////////////////////////////////////////////////////////////////////////
	"#if":
	{
		"prefix": "#if",
		"body":
		[
			"#if $1",
			"$0",
			"#endif"
		],
		"description": "#if"
	},
	//////////////////////////////////////////////////////////////////////////
	"ifdef":
	{
		"prefix": "#ifd",
		"body":
		[
			"#ifdef $1",
			"$0",
			"#endif"
		],
		"description": "ifdef"
	},
	//////////////////////////////////////////////////////////////////////////
	"ifndef":
	{
		"prefix": "#ifnd",
		"body":
		[
			"#ifndef $1",
			"$0",
			"#endif"
		],
		"description": "ifndef"
	},
	//////////////////////////////////////////////////////////////////////////
	"free":
	{
		"prefix": "free",
		"body":
		[
			"free($1);"
		],
		"description": "free"
	},
	//////////////////////////////////////////////////////////////////////////
	"string.h":
	{
		"prefix": "string",
		"body":
		[
			"#include <string.h>"
		],
		"description": "include string.h"
	},
	//////////////////////////////////////////////////////////////////////////
	"A_Simple_C_Template":
	{
		"prefix": "#c",
		"body":
		[
			"#include <stdio.h>",
			"#include <stdlib.h>\n",
			"//////////////////////////////////////////////////////////////////////////\n",
			"//////////////////////////////////////////////////////////////////////////",
			"int main(void)",
			"{",
			"\t$0",
			"\treturn 0;",
			"}"
		],
		"description": "A simple C template"
	},
	//////////////////////////////////////////////////////////////////////////
	"C Test":
	{
		"prefix": "#ct",
		"body":
		[
			"#include <stdio.h>",
			"#include <stdlib.h>",
			"#include <string.h>",
			"#include <stdbool.h>",
			"#include <windows.h>\n",
			"#define NOTEST",
			"//////////////////////////////////////////////////////////////////////////\n",
			"//////////////////////////////////////////////////////////////////////////",
			"#ifdef NOTEST",
			"int main(int argc, char * argv[])",
			"{",
			"\t$0",
			"\treturn 0;",
			"}",
			"#endif",
			"//////////////////////////////////////////////////////////////////////////",
			"#ifdef TEST",
			"int main(int argc, char * argv[])",
			"{",
			"\t",
			"\treturn 0;",
			"}",
			"#endif",
			"//////////////////////////////////////////////////////////////////////////"
		],
		"description": "A C Test Code"
	},
	//////////////////////////////////////////////////////////////////////////
	
}